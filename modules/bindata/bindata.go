// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/app.ini.sample
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xef\x6f\x9b\x30\x10\xfd\x7e\x7f\x05\xaa\x54\xa9\xfd\x30\xc8\xba\x69\xcb\x2a\xf5\x83\x01\x53\xac\x18\x8c\xc0\x69\x9b\x56\xc8\xa2\xd4\x49\x68\x7e\x98\x02\xe9\xb4\xfd\xf5\xb3\x49\x48\xa3\xa9\x20\x59\xf2\xdd\xbb\x77\xe7\x77\xef\xa9\xa8\xeb\x1c\x50\x92\x88\x18\x45\xd8\xba\xb1\x82\x62\x25\x51\x5d\x5d\x5b\xfa\xe8\x2f\xd6\x5c\x35\x56\xb9\xae\xe4\xb6\x6b\x21\x9d\xc6\x22\x62\xbe\x01\xbe\xc8\x77\x00\x78\x6a\x65\xf3\x2e\x9b\x1c\x92\x94\x71\xe6\x31\xaa\x33\xcb\xae\xab\xc1\x67\x11\x22\xb1\xbe\x8d\xec\xfe\x87\x94\x31\x2e\xa6\xa9\x01\x9c\x5f\x0c\xe8\xcb\xf6\xda\x71\xce\x2f\xf6\x60\x7d\x39\xbf\x08\x39\x4f\x44\xc2\x52\x7e\xd9\x3a\xd0\x5f\x90\xef\xa7\xd6\x0d\x1c\x13\x9a\x60\x3c\x1a\x8f\x80\x32\x0f\x51\x71\x42\x6b\xfa\x9e\xd2\xfd\xcf\xe6\xe1\x94\x8b\x80\x50\x33\x7d\xb9\x6b\x3b\xb5\x71\x4c\x49\xeb\x94\xb2\xe9\xec\x5a\x6e\x60\x82\x67\x9f\x02\x56\xf2\x4f\x9f\xcf\x38\xe2\xc4\xdb\xf7\x4c\x10\x0f\x35\xce\x76\x00\xc7\xc8\xa5\x58\xdc\x3e\x92\x44\x07\xba\x66\x27\x8d\x30\xf3\xbd\x90\x39\x64\x18\xfb\x02\x3f\x70\x1c\x67\x84\x19\x45\xce\xec\xd7\x56\x6d\xcf\xf6\x89\x80\x51\x1f\xa7\x26\x6a\x0a\xda\x33\x53\x5a\x98\x32\x44\x29\xbb\x17\x5e\xca\xb2\x4c\x1c\xc5\x1c\xc8\xd7\x6a\x91\xc3\xc9\x18\x70\x58\x4a\xa9\xb6\xad\x5a\x4b\x70\xa7\x41\x80\x53\x41\xb1\x29\xfa\x3a\xd2\x1f\x50\x7c\x87\x8d\x4a\xbc\x29\x4a\xb9\xa7\xb0\x0f\xf0\x7c\x48\x1e\xc2\xf3\xea\x34\x46\xd9\xad\x7e\xb1\x7e\x39\x1e\x06\x88\xd0\x83\xa0\x24\xc6\xd9\x40\xae\xe9\x4d\x2c\x23\x8f\x58\x64\x21\x09\xcc\x8e\xae\xc6\xe0\x23\x42\x67\x9f\xd4\xfa\x68\x66\x4a\x7f\x1a\xfb\xac\x8b\x72\xa5\x1f\xeb\x71\x72\x77\xc4\xa0\x84\x1c\xd6\x69\xec\xb1\x54\x6a\xd5\xda\x3d\x50\x0f\xbc\x71\x8c\xe3\xaa\x52\xb6\x0e\xbf\xf2\x7e\x7d\xa7\x63\x74\xef\xb8\xdf\xc2\x20\x98\x84\x51\xe4\x3c\xfc\x25\xee\xdb\xeb\x0c\xad\x8a\x8a\x87\xbe\x57\x65\x6e\xf4\x63\xf2\x32\x59\x80\xab\xb5\x3a\x58\xfc\x56\xd5\x4b\xd9\xf4\x11\xe2\xf5\x1b\x19\x5a\x2d\xd4\xba\xd8\x2e\x6c\xd5\x2c\x9c\x79\xa1\x9b\xa8\xad\xad\x0f\x3d\xe6\x6f\xf9\x6c\xc6\xc8\xa1\x1f\x46\x57\x68\x73\x94\x2b\xf9\xb6\xab\xea\x8f\xac\xfd\x11\xcc\xc1\x0b\x51\x1c\xf7\x82\x2f\xd4\xb3\xea\xf4\xb2\xbd\x14\x1b\x5d\xa8\x6a\xe4\xc6\x2d\x34\x37\x68\x81\x63\x13\x4a\x76\xed\xd2\x0a\x35\x03\x1c\xdd\xd0\x9b\xc1\x31\xe7\x17\xed\x86\x13\x66\x23\x01\x24\x53\x4a\x0f\x62\xfd\x0b\x00\x00\xff\xff\xb3\xef\xb7\xf2\xc1\x03\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 961, mode: os.FileMode(420), modTime: time.Unix(1483999143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confAppIniSample = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x51\x5f\x6b\xdb\x30\x10\x7f\xbf\x4f\x61\x02\x81\xf4\xc5\xce\xf6\xb2\xb5\xd0\x07\xd5\x3e\x37\x62\x8a\x65\x24\x65\x6b\x5a\x8c\x08\x9e\xb2\x65\x4d\x63\x63\xb9\x85\x7d\xfb\xe9\xe2\xb8\x98\xd1\x04\x0c\xf7\xfb\xa7\xd3\x4f\x4f\xbb\xb6\xad\x80\x95\xa5\x2d\xd8\x1a\xa3\xdb\x28\xdf\x3d\x3b\xd6\x1e\x6e\xa2\xf0\x39\x0f\xd1\xbe\xe9\xa2\xfa\x78\x70\xa7\xde\x83\xda\x14\x76\x2d\x33\x12\xfe\x74\x6f\x00\xf0\xe4\x5d\xf7\xe6\xba\x0a\x4a\x25\x8d\x4c\xa5\x08\xcc\xef\xbe\x6f\x21\x93\x6b\xc6\x8b\x30\x2d\xe3\xf3\x1f\x94\x94\xc6\x6e\x14\x09\xe6\x8b\x51\x7d\xe5\x6f\x92\x64\xbe\x18\xc4\x61\x98\x2f\x56\xc6\x94\xb6\x94\xca\x5c\xf9\x04\xce\x03\xcb\x32\x15\xdd\xc2\x3b\x11\x02\xae\x97\xd7\x4b\x10\x32\x65\xc2\x4e\x62\xe9\xdc\x69\xdc\xff\x69\x29\x2a\x63\x73\x2e\x68\xfb\xfa\xd5\xf7\xcd\x4b\x42\x16\x9f\xd4\xae\xeb\xe3\xd6\xbd\xc0\x37\xdc\x7e\x28\x78\x76\x7f\xcf\xbc\x36\xcc\xf0\x74\x38\xb3\x64\x66\x15\x74\x71\x02\x58\xb0\x3b\x81\xf6\xfe\x91\x97\x01\xe8\xbb\x57\x47\xc5\xec\x87\x22\x2b\xd0\x88\x99\xc5\x07\x83\x85\xe6\x92\x1a\x99\xc5\x7f\x7c\x73\x9a\x0d\x44\x2e\x45\x86\x8a\x50\x32\xf8\x19\x59\x77\x64\x63\x42\xc8\x1f\x36\x55\x52\x6b\xfb\x5e\xe6\x18\x7e\x6c\x7e\x55\x30\x59\x03\x2e\x8f\x52\x37\x27\xdf\x1c\x1d\xdc\x6d\xf2\x1c\x95\x15\x48\xa6\x4f\xcb\xf0\x03\x81\xdf\x91\x5a\x32\xdd\xae\x76\x43\x44\x7c\x91\x57\x23\x79\x81\xf7\x87\x29\x26\xe4\x7d\xb8\x71\xb8\x39\x8e\x0b\xac\xd9\x83\x15\xbc\x40\x3d\x86\x87\x78\xc2\x34\x7f\x44\xab\x57\x3c\xa7\x37\xfa\xfc\x15\x32\xc6\xc5\xf6\x03\x6f\xc6\xb6\x64\xfd\x02\xff\x02\x00\x00\xff\xff\x7b\x6c\x0a\x70\x7e\x02\x00\x00")

func confAppIniSampleBytes() ([]byte, error) {
	return bindataRead(
		_confAppIniSample,
		"conf/app.ini.sample",
	)
}

func confAppIniSample() (*asset, error) {
	bytes, err := confAppIniSampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini.sample", size: 638, mode: os.FileMode(420), modTime: time.Unix(1483909861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/app.ini.sample": confAppIniSample,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"app.ini.sample": &bintree{confAppIniSample, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

