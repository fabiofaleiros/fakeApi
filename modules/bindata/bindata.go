// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xef\xa7\x10\x81\x40\xf2\x62\x7b\xdb\xc3\x46\xc1\x0f\xaa\x75\xdd\x88\x29\x96\x91\x94\xad\x69\x30\xc2\x78\xea\xd6\xf5\x8f\x8d\xe5\x06\xf6\xed\x87\xec\x38\x84\x12\xfc\xe4\x7b\xce\xef\x5c\x71\xee\xa1\xee\xba\x0a\xd4\xae\xb0\x5b\xc9\x90\xa4\xe4\x97\x3b\x02\x1c\xbc\xeb\x8f\xae\xaf\xa0\x54\xd2\xc8\x4c\x0a\x92\x92\x3f\xc3\xd0\x01\x93\x5b\xca\x0b\x92\x92\x24\x1a\x3f\x50\x52\x1a\xbb\x53\xc1\xb0\x5c\xcd\xee\xb5\xbf\x89\xe3\xe5\x6a\x32\xaf\xfd\xcd\x72\xb5\x31\xa6\xb4\xa5\x54\x66\xed\x63\x18\x7f\x28\x63\x8a\xa4\x70\x16\x48\x4a\xbe\x24\x49\x02\x42\x66\x54\xd8\x8b\xd8\xb0\xf7\x32\xee\x63\x5a\x86\xca\xd8\x9c\x8b\xf0\xf8\xe6\xdd\x0f\xed\x6b\x1c\x10\x1f\x37\xae\x1f\xa2\xce\xbd\xc2\x77\xdc\x5f\x35\x3c\xbb\x7f\xa3\xae\x0d\x35\x3c\x9b\x76\x96\xd4\x6c\x48\x4a\xa2\x18\xb0\xa0\xb7\x02\xed\xdd\x03\x2f\x49\x4a\x86\xfe\xdd\x01\xc0\xe1\xb1\x7e\x76\xb4\x7b\xaa\x40\x23\x32\x8b\xf7\x06\x0b\xcd\x65\x68\x64\x11\xfd\xf5\xed\xdb\x62\x12\x72\x29\x18\xaa\x30\x0d\x80\x5f\x04\xb4\x0e\x18\x15\x42\xfe\xb4\x99\x92\x5a\xdb\x73\x99\x73\xf8\x4b\xfb\xbb\x82\xd3\x1d\x9a\xf6\xcd\xb7\x2f\x0e\x6e\x77\x79\x8e\xca\x0a\x0c\xc6\x4f\xc9\x58\x11\xfe\xc0\xd0\x8c\xe9\xeb\xc6\x4d\x58\x74\xb2\x57\xb3\x78\x1a\x3f\x3e\x5d\xce\x84\xbc\xb3\x4a\x1a\x6a\x70\x5e\xba\xa5\xf7\x56\xf0\x02\xf5\x1c\x9e\x24\xe3\x4c\xf3\x07\xb4\x7a\xc3\xf3\x70\x97\xcf\xdf\x80\x51\x2e\xf6\x57\x58\x46\xf7\x01\xfd\x0a\xf0\x3f\x00\x00\xff\xff\x3a\x8c\x0d\x55\x49\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 585, mode: os.FileMode(420), modTime: time.Unix(1483354215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
